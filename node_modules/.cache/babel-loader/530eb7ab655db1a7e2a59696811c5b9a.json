{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\React JS\\\\React-Complete Guide (Udemy)\\\\REACT-COMPLETE-GUIDE\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n    _s = $RefreshSig$();\n\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport ExpensesList from \"./ExpensesList\";\nimport ExpensesChart from \"./ExpensesChart\";\nimport \"../Expenses/Expenses.css\";\nimport Card from \"../UI/Card\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Expenses(props) {\n  _s();\n\n  const expenses = props.expenses;\n  const [selectedYear, setselectedYear] = useState(\"2020\");\n\n  const expenseFilterYearChangeHandler = expFilterDateYear => {\n    setselectedYear(expFilterDateYear);\n  };\n\n  const filteredExpenses = props.expenses.filter(expense => {\n    return expense.date.getFullYear().toString() == selectedYear;\n  });\n  {\n    /* We futher minimizing this code to make it more lean */\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: selectedYear,\n        onExpenseFilterYearChange: expenseFilterYearChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExpensesChart, {\n        expenses: filteredExpenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExpensesList, {\n        items: filteredExpenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Expenses, \"anr5iH2MmpHpxamEjcYVZb8/ooo=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["D:/Learning/React JS/React-Complete Guide (Udemy)/REACT-COMPLETE-GUIDE/src/components/Expenses/Expenses.js"],"names":["ExpensesFilter","ExpensesList","ExpensesChart","Card","useState","Expenses","props","expenses","selectedYear","setselectedYear","expenseFilterYearChangeHandler","expFilterDateYear","filteredExpenses","filter","expense","date","getFullYear","toString"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,0BAAP;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,MAAD,CAAhD;;AAEA,QAAMM,8BAA8B,GAAIC,iBAAD,IAAuB;AAC5DF,IAAAA,eAAe,CAACE,iBAAD,CAAf;AACD,GAFD;;AAGA,QAAMC,gBAAgB,GAAGN,KAAK,CAACC,QAAN,CAAeM,MAAf,CAAuBC,OAAD,IAAa;AAC1D,WAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,MAAyCT,YAAhD;AACD,GAFwB,CAAzB;AAIA;AACE;AACD;AAED,sBACE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BACE,QAAC,cAAD;AACE,QAAA,QAAQ,EAAEA,YADZ;AAEE,QAAA,yBAAyB,EAAEE;AAF7B;AAAA;AAAA;AAAA;AAAA,cADF,eAkCE,QAAC,aAAD;AAAe,QAAA,QAAQ,EAAEE;AAAzB;AAAA;AAAA;AAAA;AAAA,cAlCF,eAmCE,QAAC,YAAD;AAAc,QAAA,KAAK,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,cAnCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD;;GAzDQP,Q;;KAAAA,Q;AA2DT,eAAeA,QAAf","sourcesContent":["import ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\nimport \"../Expenses/Expenses.css\";\r\nimport Card from \"../UI/Card\";\r\nimport { useState } from \"react\";\r\n\r\nfunction Expenses(props) {\r\n  const expenses = props.expenses;\r\n\r\n  const [selectedYear, setselectedYear] = useState(\"2020\");\r\n\r\n  const expenseFilterYearChangeHandler = (expFilterDateYear) => {\r\n    setselectedYear(expFilterDateYear);\r\n  };\r\n  const filteredExpenses = props.expenses.filter((expense) => {\r\n    return expense.date.getFullYear().toString() == selectedYear;\r\n  });\r\n\r\n  {\r\n    /* We futher minimizing this code to make it more lean */\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={selectedYear}\r\n          onExpenseFilterYearChange={expenseFilterYearChangeHandler}\r\n        />\r\n        {/*   {filteredExpenses.length === 0 ? (\r\n          <p>No expenses found.</p>\r\n        ) : (\r\n          filteredExpenses.map((expense) => (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          ))\r\n        )} */}\r\n        {/* (Commented above code ) Alternative to above ternary condition to avoid long condition becomes difficult to read \r\n       // if the condition matches then React will execute next statement after && operator \r\n       other wise move to next statements\r\n       */}\r\n        {/*     {filteredExpenses.length === 0 && <p>No expenses found.</p>}\r\n\r\n        {filteredExpenses.length === 0 &&\r\n          filteredExpenses.map((expense) => (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          ))} */}\r\n\r\n        {/* We minimized code and saved content to variable 'expensesContent' */}\r\n        <ExpensesChart expenses={filteredExpenses} />\r\n        <ExpensesList items={filteredExpenses} />\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Expenses;\r\n"]},"metadata":{},"sourceType":"module"}